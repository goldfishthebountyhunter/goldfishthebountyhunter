#!/bin/bash
#version=1.30.4
#
# Chatgpt in the terminal.
# commands get parsed into clipboard.. I'm lazy...
#
# no other dependencies.. just a lack of judgement
# in putting an api key in a script.  Cap your spending at a few bucks
# this is meant to be brief, for just getting command help etc so
# you barely use a few cents a week, depending on use.
# 
#  $ gpt how do I get the installed kernel version
#  $ gpt: ###uname -r###
#  $ copied to clip: uname -r
#  $ you:
#
# Oh, I use a nerdfont, so there are symbols in it. If you don't like them
# change them out (lines 58 and 75, aren't I nice)
# Those lines might move in the future, I might not update the line numbers.
# I might not.
# I have faith in you.
#
#
#
 
 
# Replace with your own OpenAI playground API key
API_KEY="sk-rikA-n3v3r60nn461v3y0uuPn3v3R60nn4L27yu060"
 
# The endpoint for the ChatGPT API
URL="https://api.openai.com/v1/chat/completions"
 
# Initialize an empty array to store the conversation messages
messages=()
 
# Add a system message to instruct the assistant to format commands with ###
messages+=('{"role": "system", "content": "You are a helpful assistant. I use Arch based Linux. Be very brief. If asked for a command give only that as the reply enclosed inside ###"}')
 
# Log file path
LOG_FILE="$HOME/gpt.log"
 
# Function to send a message to ChatGPT and receive a response
chat_with_gpt() {
  local input="$1"
  messages+=('{"role": "user", "content": "'"${input//\"/\\\"}"'"}')
 
  local payload="{\"model\": \"gpt-4\", \"messages\": [$(IFS=,; echo "${messages[*]}")], \"temperature\": 0.7}"
 
  response=$(curl -s -X POST "$URL" -H "Authorization: Bearer $API_KEY" -H "Content-Type: application/json" -d "$payload")
  
  # Extract the content from the response
  content=$(echo "$response" | jq -r '.choices[0].message.content')
 
  # Append assistant's response to the messages array
  messages+=('{"role": "assistant", "content": "'"${content//\"/\\\"}"'"}')
 
  # Print the assistant's response
  echo -e " gpt  $content"
 
  # Highlight text enclosed in ###
  highlighted=$(echo "$content" | grep -oP '(?<=###).*?(?=###)')
  if [ -n "$highlighted" ]; then
    echo -e "\033[1;33mcopied to clip: $highlighted\033[0m"
    echo -n "$highlighted" | xclip -selection primary
  fi
 
  # Log the conversation
  echo -e "User: $input\nGPT: $content\n" >> "$LOG_FILE"
}
 
# Function to start the conversation loop
start_conversation() {
  while true; do
    # Prompt the user for input
    read -p " you  " question
 
    # Exit if the user presses enter with no text
    if [ -z "$question" ]; then
      #echo "Goodbye!"
      exit 0
    fi
 
    # Send the input to ChatGPT
    chat_with_gpt "$question"
  done
}
 
# Check if a question is provided as an argument
if [ $# -gt 0 ]; then
  initial_question="$*"
  chat_with_gpt "$initial_question"
fi
 
# Start the conversation
start_conversation
